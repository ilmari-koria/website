<?xml version="1.0"?>
<!-- Converted from org-mode to XML by om-to-xml version 0.0.7 -->
<!-- See https://github.com/ndw/org-to-xml -->
<document xmlns="https://nwalsh.com/ns/org-to-xml">
<keyword key="TITLE" value="Humanities Dissertation in org-mode? Some Thoughts" mode="top-comment" granularity="element" cached="t"/>
<keyword key="FILETAGS" value="emacs org-mode productivity" granularity="element" cached="t"/>
<keyword key="DESCRIPTION" value="GNU Emacs org-mode workflow for humanities research." granularity="element" cached="t"/>
<keyword key="DATE" value="2022-01-30" granularity="element" cached="t"/> 
<headline raw-value="Introduction" robust-begin="206" robust-end="1379" level="1" mode="first-section"><title>Introduction</title>
<section robust-begin="204" robust-end="1379" mode="section">
<paragraph mode="planning">Over the past couple of days I have been toying with the idea of formally continuing my academic studies and writing a PhD dissertation. As I have using "<link type="https" path="//orgmode.org/" format="bracket" raw-link="https://orgmode.org/">org-mode</link>" for a little while now, I was curious about setting it up for an extended humanities project <footnote-reference label="1" type="standard"/>. Briefly, org-mode is an extension for  the multipurpose software <link type="https" path="//www.gnu.org/software/emacs/" format="bracket" raw-link="https://www.gnu.org/software/emacs/">GNU Emacs</link>, based around plain text markup. Among other features, it hosts a convenient way to write and outline text, that one can then export to other intermediary formats, such as LaTeX. Additionally, it is a powerful productivity tool for activity planning and scheduling (including to-do lists and an agenda), all in plain text<footnote-reference label="2" type="standard"/>. While it can be a useful way to write extensive prose documents, its use is not too apparent within the Arts and Humanities academic community. The purpose of this post is therefore to explore my experiences with GNU Emacs and org-mode, within the backdrop of humanities writing tasks. This includes sharing some of the my own choices in terms of setup, with appropriate addons for, for example, reference management and note taking <footnote-reference label="3" type="standard"/>.
</paragraph>
</section> 
</headline> 
<headline raw-value="Regarding GNU Emacs" robust-begin="1406" robust-end="2722" level="1" mode="first-section"><title>Regarding GNU Emacs</title>
<section robust-begin="1404" robust-end="2722" mode="section">
<paragraph mode="planning">Regarding GNU Emacs, it is mainly associated with the software development and systems administration world, but I have come across configurations for humanities research as well. In my area of interest this includes, for example, Christian Wittern's <italic><link type="https" path="//github.com/mandoku/mandoku" format="bracket" raw-link="https://github.com/mandoku/mandoku">Mandoku</link></italic>, designed for research into pre-modern Chinese texts <link type="fuzzy" path="cite:witternDigitalTextsPractice2020" format="bracket" raw-link="cite:witternDigitalTextsPractice2020">cite:witternDigitalTextsPractice2020</link>. Briefly, Mandoku hosts a suite of tools for philological analysis, translation and annotation of primary literature. And it includes integration to <link type="http" path="//www.kanripo.org/" format="bracket" raw-link="http://www.kanripo.org/">Kanseki Repository</link>, an online database of texts in computer readable format compiled by Wittern and his team. Other related examples include that of Jay Dixit, a New York based science writer, who has honed his GNU Emacs configuration for professional writing tasks <link type="fuzzy" path="cite:thoughtbotEmacsWriters2015" format="bracket" raw-link="cite:thoughtbotEmacsWriters2015">cite:thoughtbotEmacsWriters2015</link>. Through his demonstration, Dixit displays the modularity of the software beyond its applicability in computing and Unix administration. Lastly, one can find further related examples within the GNU Emacs "emacs-humanities" <link type="https" path="//lists.gnu.org/mailman/listinfo/emacs-humanities" format="bracket" raw-link="https://lists.gnu.org/mailman/listinfo/emacs-humanities">mailing-list</link>, and its <link type="https" path="//lists.gnu.org/archive/html/emacs-humanities/" format="bracket" raw-link="https://lists.gnu.org/archive/html/emacs-humanities/">archives</link>.
</paragraph>
</section> 
</headline> 
<headline raw-value="On org-mode" robust-begin="2741" robust-end="4006" level="1" mode="first-section"><title>On org-mode</title>
<section robust-begin="2739" robust-end="4006" mode="section">
<paragraph mode="planning">As highlighted above, org-mode is a GNU Emacs mode for a variety of text based tasks, including notes, authoring documents, and maintaining to-do lists. Being analogues to other <link type="https" path="//en.wikipedia.org/wiki/Markup_language" format="bracket" raw-link="https://en.wikipedia.org/wiki/Markup_language">markup languages</link>, it involves utilising a predefined syntax to manipulate a document in plain text. Everything being plain text means that one can open and edit an org-mode document in any conventional text editor. Additionally, as with other markup systems, one can easily export org-mode files to different intermediate formats such as HTML and LaTeX. This means that one can simply write without needing to think about formatting, essentially making it a feature rich distraction-free writing environment. Its defining feature for me, as it is for others, is its highly flexible structured text formatting allowing one to easily outline and plan documents. It uses marks (by default an asterisk) to indicate nested levels of a hierarchy (trees) that the user can fold to hide their respective contents. This, combined with GNU Emacs use of buffers, allows one to have a document outline always visible, while simultaneously writing content within any section.
</paragraph> 
<paragraph><caption>"Org-mode trees in action (in this post)"</caption><link type="fuzzy" path="static/org-one.gif" format="bracket" raw-link="static/org-one.gif"/>
</paragraph>
</section> 
</headline> 
<headline raw-value="On org-roam-2" robust-begin="4089" robust-end="5559" level="1" mode="first-section"><tags>ignore</tags><title>On org-roam-2</title>
<section robust-begin="4087" robust-end="5559" mode="section">
<paragraph mode="planning">Being a part of GNU Emacs, one can customise org-modes functionality to a great extent with customised macros and further addons. In general, most of my writing and note taking workflow revolve around the functionality provided by the extension <link type="https" path="//www.orgroam.com/" format="bracket" raw-link="https://www.orgroam.com/">org-roam</link>. This mode is broadly speaking a note taking strategy involving linked "nodes," inspired from German Sociologist Niklas Luhmann's (1927-1998) <italic>zettelkasten</italic> method <link type="fuzzy" path="cite:schmidtNiklasLuhmannCard2018" format="bracket" raw-link="cite:schmidtNiklasLuhmannCard2018">cite:schmidtNiklasLuhmannCard2018</link>, and also <link type="https" path="//roamresearch.com/" format="bracket" raw-link="https://roamresearch.com/">Roam Research</link>. I store every written "thing" (whether bibliographic or otherwise) in an org-roam database, that I can quickly search via tags or arbitrary text. All such nodes are org-mode files, associated with a unique identifier, that one can then link to other org files in said database. Through writing and linking content in such a database, one can develop a kind of personal "wiki" or knowledge pool. This can then be, for example, visualised (as with <link type="https" path="//github.com/org-roam/org-roam-ui" format="bracket" raw-link="https://github.com/org-roam/org-roam-ui">org-roam-ui</link>) to discover lines of thought not necessarily accessible via conventional note taking approaches. Lastly, in terms of citations, these I insert into my org-files with <link type="https" path="//github.com/jkitchin/org-ref" format="bracket" raw-link="https://github.com/jkitchin/org-ref">org-ref</link> as links, that I can quickly turn into org-roam nodes with <link type="https" path="//github.com/org-roam/org-roam-bibtex" format="bracket" raw-link="https://github.com/org-roam/org-roam-bibtex">org-roam-bibtex</link>. 
</paragraph> 
<paragraph><caption>"Using org-ref"</caption><link type="fuzzy" path="static/org-two.gif" format="bracket" raw-link="static/org-two.gif"/>
</paragraph>
</section> 
</headline> 
<headline raw-value="Other Functionality" robust-begin="5586" robust-end="6739" level="1" mode="first-section"><title>Other Functionality</title>
<section robust-begin="5584" robust-end="6739" mode="section">
<paragraph mode="planning">Apart from org-mode, I have also been using other modes to enhance my writing experience within GNU Emacs. This includes, for example, <link type="https" path="//github.com/bnbeckwith/writegood-mode" format="bracket" raw-link="https://github.com/bnbeckwith/writegood-mode">writegood-mode</link> that is helpful for me as a non-native English speaker, as it can highlight problematic uses of language. These include pointing out weasel words, passive structures, any unwanted idiosyncrasies, and also duplicate words. Other modes include <link type="https" path="//github.com/hpdeifel/synosaurus" format="bracket" raw-link="https://github.com/hpdeifel/synosaurus">synosaurus-mode</link> for a thesaurus, <link type="https" path="//github.com/bnbeckwith/wc-mode" format="bracket" raw-link="https://github.com/bnbeckwith/wc-mode">wc-mode</link> for wordcounting, <link type="https" path="//github.com/rnkn/olivetti" format="bracket" raw-link="https://github.com/rnkn/olivetti">olivetti-mode</link> for helpful visual formatting within GNU Emacs, and <link type="https" path="//github.com/hrs/engine-mode" format="bracket" raw-link="https://github.com/hrs/engine-mode">engine-mode</link> for quick web searches. Additionally, I grown to heavily rely on <link type="https" path="//github.com/danielsz/Palimpsest" format="bracket" raw-link="https://github.com/danielsz/Palimpsest">palimpsest-mode</link>, which is a simple addon through which one can quickly highlight a text portion and archive it. This means that nothing gets deleted, and I can later refer to any text snippet (that did not initially fit into a section) without hassle.
</paragraph> 
<paragraph><caption>"org-roam use"</caption><link type="fuzzy" path="static/org-three.gif" format="bracket" raw-link="static/org-three.gif"/>
</paragraph>
</section> 
</headline> 
<headline raw-value="Externals: Git and Zotero" robust-begin="6822" robust-end="7848" level="1" mode="first-section"><tags>ignore</tags><title>Externals: Git and Zotero</title>
<section robust-begin="6820" robust-end="7848" mode="section">
<paragraph mode="planning">While I regularly take backups with external harddrives and Dropbox, I also use <link type="https" path="//en.wikipedia.org/wiki/Git" format="bracket" raw-link="https://en.wikipedia.org/wiki/Git">Git</link> as a way to version control my notes and projects. For the future, I plan to use Git to experiment with different insights, having the possibility to then returning to the main text body. There are a multitude of options when working with Git in GNU Emacs, with <link type="https" path="//magit.vc/" format="bracket" raw-link="https://magit.vc/">Magit</link> being particularly well regarded. In terms of managing my bibliography and PDF library, I currently use <link type="https" path="//www.zotero.org/" format="bracket" raw-link="https://www.zotero.org/">Zotero</link> with the <link type="https" path="//retorque.re/zotero-better-bibtex/" format="bracket" raw-link="https://retorque.re/zotero-better-bibtex/">Better-Bibtex</link> add on. Zotero needs not too much introduction, being a well regarded free open-source bibliographical tool. In short, as I add new material to Zotero, a master <link type="https" path="//en.wikipedia.org/wiki/BibTeX" format="bracket" raw-link="https://en.wikipedia.org/wiki/BibTeX">BibTeX</link> file is also updated, which is then read by org-ref. Relying on org-mode to create LaTeX projects, I use Better-Bibtex to makes sure that, for example, there are no clashes between citation keys.
</paragraph>
</section> 
</headline> 
<headline raw-value="Issues" robust-begin="7862" robust-end="8912" level="1" mode="first-section"><title>Issues</title>
<section robust-begin="7860" robust-end="8912" mode="section">
<paragraph mode="planning">While I am comfortable working with the above setup, it is difficult to integrate it into a conventional work flow that stresses software conformity and collaboration. Org-mode is not (readily) designed for web based interaction, relying on the user to install an Emacs client to fully engage with a file. Due to the required time investment, it is understandably difficult to convince someone to learn Emacs simply to open a single file. While org-mode does host a number of export options, these also have some limitations worth considering in terms of collaboration. This issue became apparent during my MA thesis, which I also wrote in org-mode using roughly the same tools as above.  For example, reference links do not carry over to the exported ".odt" format utilised by LibreOffice. This was problematic as I needed to send my supervisor my project in a Microsoft Word readable format (converted from LibreOffice). However, I will be able to iron out these kinds of issues in the future as my familiarity with GNU Emacs and Emacs Lisp increases.
</paragraph>
</section> 
</headline> 
<headline raw-value="Conclusion" robust-begin="8930" robust-end="10301" level="1" mode="first-section"><title>Conclusion</title>
<section robust-begin="8928" robust-end="10301" mode="section">
<paragraph mode="planning">This post sought to share my experiences using GNU Emacs org-mode for humanities writing tasks, in this case with a future dissertation in mind. I believe I have settled for the basic writing environment in terms of completing a multi-year writing project, however, I still expect some tinkering to be had. This is especially due to not having first-hand experience writing or editing a 100,000+ word document, meaning some adjustment is inevitable. At this stage the main issue, I feel, concerns the smooth collaboration between author, supervisors, and any collaborators. Future posts here concerning org-mode for humanities research will likely discuss these issues further, together with trying to establish some feasible strategies to overcome them. 
</paragraph> <footnote-definition label="1">
<paragraph>For a tutorial on how to use Org-mode, please see the online course by Rainer König <link type="fuzzy" path="cite:konigGettingYourselfOrganised2016" format="bracket" raw-link="cite:konigGettingYourselfOrganised2016">cite:konigGettingYourselfOrganised2016</link>. 
</paragraph></footnote-definition> <footnote-definition label="2">
<paragraph>In addition to writing tasks, GNU Emacs makes for a descent <link type="https" path="//en.wikipedia.org/wiki/Digital_humanities" format="bracket" raw-link="https://en.wikipedia.org/wiki/Digital_humanities">digital humanities</link> platform for text encoding and programming, with built-in support for common formats.
</paragraph></footnote-definition> <footnote-definition label="3">
<paragraph>This post was also written in org-mode and published with <link type="https" path="//github.com/bastibe/org-static-blog" format="bracket" raw-link="https://github.com/bastibe/org-static-blog">org-static-blog</link>. For reference, please see the raw ".org" file <link type="fuzzy" path="static/2022-01-30-blog.org" format="bracket" raw-link="static/2022-01-30-blog.org">here</link>.
</paragraph></footnote-definition>
</section> 
</headline> </document>
